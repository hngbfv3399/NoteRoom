rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자 인증 확인 함수
    function isAuthenticated() {
      return request.auth != null;
    }

    // 요청한 사용자가 문서의 소유자인지 확인하는 함수
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 관리자 권한 확인 함수 - 보안 강화
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // 감정 분포 데이터 유효성 검증 함수
    function isValidEmotionDistribution() {
      return request.resource.data.emotionDistribution is map &&
             request.resource.data.emotionDistribution.keys().hasAll(['joy', 'sadness', 'anger', 'excited', 'calm', 'stressed', 'grateful', 'anxious', 'confident', 'lonely', 'hopeful', 'tired']);
    }

    // 감정 추적 데이터 유효성 검증 함수
    function isValidEmotionTracking() {
      return request.resource.data.emotionTracking is map &&
             request.resource.data.emotionTracking.dailyEmotions is list &&
             request.resource.data.emotionTracking.settings is map;
    }

    // 감정 데이터 전체 유효성 검증 함수
    function isValidEmotionData() {
      return isValidEmotionDistribution() && isValidEmotionTracking();
    }

    // 안전한 필드 업데이트인지 확인하는 함수
    function isSafeFieldUpdate(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }

    // 사용자 프로필 컬렉션 규칙
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // 업데이트 규칙 - 더 유연한 감정 데이터 처리
      allow update: if (isOwner(userId) && (
        // 1. 일반 프로필 업데이트 (감정 데이터 제외)
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['emotionDistribution', 'emotionTracking']) ||
        
        // 2. 감정 분포만 업데이트
        isSafeFieldUpdate(['emotionDistribution']) ||
        
        // 3. 감정 추적만 업데이트
        isSafeFieldUpdate(['emotionTracking']) ||
        
        // 4. 감정 분포와 추적 동시 업데이트
        isSafeFieldUpdate(['emotionDistribution', 'emotionTracking']) ||
        
        // 5. 감정 분포와 기분 상태 동시 업데이트
        isSafeFieldUpdate(['emotionDistribution', 'mood']) ||
        
        // 6. 감정 추적과 기분 상태 동시 업데이트
        isSafeFieldUpdate(['emotionTracking', 'mood']) ||
        
        // 7. 감정 분포, 추적, 기분 상태 모두 업데이트
        isSafeFieldUpdate(['emotionDistribution', 'emotionTracking', 'mood']) ||
        
        // 8. 기분 상태만 업데이트
        isSafeFieldUpdate(['mood']) ||
        
        // 9. 감정 관련 필드들의 부분 업데이트 허용
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['emotionDistribution', 'emotionTracking', 'mood']) &&
        request.resource.data.diff(resource.data).affectedKeys().size() <= 3
      )) || (
        // 관리자는 마이그레이션을 위해 구독 관련 필드 업데이트 가능
        isAdmin() && isSafeFieldUpdate(['subscriberCount', 'subscriptionCount', 'migratedAt'])
      );
      
      allow delete: if isOwner(userId);
    }

    // 드래프트 컬렉션 (임시저장) - 새로 추가
    match /drafts/{draftId} {
      // 읽기/쓰기: 본인만 가능
      allow read, write: if isAuthenticated() && 
                            request.auth.uid == resource.data.userUid;
      
      // 생성: 인증된 사용자만 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userUid == request.auth.uid &&
                       isValidDraftData(request.resource.data);
    }

    // 노트 컬렉션 규칙 개선 - 2025.05.27 v2.3 (모든 노트 공개) + 검색 최적화
    match /notes/{noteId} {
      // 읽기: 모든 사용자 허용 (모든 노트 공개) - 검색 성능 최적화
      allow read: if true;
      
      // 생성: 인증된 사용자만 가능
      allow create: if isAuthenticated() && 
                       request.resource.data.userUid == request.auth.uid &&
                       isValidNoteData(request.resource.data);
      
      // 수정: 작성자만 가능 (개선된 규칙) 또는 통계 필드 업데이트
      allow update: if isAuthenticated() && (
        // 1. 작성자가 노트 내용을 수정하는 경우
        ((resource.data.userUid == request.auth.uid || resource.data.userId == request.auth.uid) &&
         isValidNoteUpdate(resource.data, request.resource.data)) ||
        
        // 2. 통계 필드만 업데이트하는 경우 (조회수, 좋아요, 댓글 수)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'likes']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'commentCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'commentCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'likes', 'commentCount'])) ||
        
        // 3. 댓글 관련 필드 업데이트 (인증된 사용자만 가능)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comment']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comment', 'commentCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount', 'comment'])) ||
        
        // 4. 검색 최적화를 위한 필드 업데이트 (시스템에서 자동 업데이트)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['searchKeywords']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastSearched']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['searchCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['searchKeywords', 'lastSearched']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['searchKeywords', 'searchCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastSearched', 'searchCount']) ||
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['searchKeywords', 'lastSearched', 'searchCount']))
      );
      
      // 삭제: 작성자만 가능
      allow delete: if isAuthenticated() && 
                       (resource.data.userUid == request.auth.uid || resource.data.userId == request.auth.uid);

      // 좋아요 서브컬렉션 규칙
      match /likesUsers/{userId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // 노트 데이터 유효성 검증 함수 - 검색 필드 추가
    function isValidNoteData(data) {
      return data.keys().hasAll(['title', 'content', 'category', 'userUid']) &&
             data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
             data.content is string && data.content.size() > 0 && data.content.size() <= 50000 &&
             data.category is string && data.category.size() > 0 && data.category.size() <= 50 &&
             data.userUid is string &&
             (!data.keys().hasAny(['isDraft']) || data.isDraft is bool) &&
             (!data.keys().hasAny(['tags']) || (data.tags is list && data.tags.size() <= 10)) &&
             (!data.keys().hasAny(['thumbnail']) || data.thumbnail is string) &&
             (!data.keys().hasAny(['images']) || (data.images is list && data.images.size() <= 20)) &&
             // 검색 최적화 필드 추가
             (!data.keys().hasAny(['searchKeywords']) || (data.searchKeywords is list && data.searchKeywords.size() <= 50)) &&
             (!data.keys().hasAny(['searchCount']) || data.searchCount is number) &&
             (!data.keys().hasAny(['lastSearched']) || data.lastSearched is timestamp);
    }

    // 노트 업데이트 유효성 검증 함수 - 검색 필드 추가
    function isValidNoteUpdate(oldData, newData) {
      // 변경 불가능한 필드 확인
      return newData.userUid == oldData.userUid &&
             // 허용된 필드만 변경되었는지 확인 (검색 필드 추가)
             newData.diff(oldData).affectedKeys().hasOnly([
               'title', 'content', 'category', 'thumbnail', 'images', 
               'isPublic', 'isDraft', 'tags', 'updatedAt',
               'searchKeywords', 'searchCount', 'lastSearched'
             ]) &&
             // 새 데이터 유효성 검증
             isValidNoteData(newData);
    }

    // 드래프트 데이터 유효성 검증 함수
    function isValidDraftData(data) {
      return data.keys().hasAll(['userUid']) &&
             data.userUid is string &&
             (!data.keys().hasAny(['title']) || (data.title is string && data.title.size() <= 200)) &&
             (!data.keys().hasAny(['content']) || (data.content is string && data.content.size() <= 50000)) &&
             (!data.keys().hasAny(['category']) || (data.category is string && data.category.size() <= 50)) &&
             (!data.keys().hasAny(['thumbnail']) || data.thumbnail is string) &&
             (!data.keys().hasAny(['images']) || (data.images is list && data.images.size() <= 20)) &&
             (!data.keys().hasAny(['isAutoSaved']) || data.isAutoSaved is bool);
    }

    // 댓글 컬렉션 규칙 (필요시 추가)
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userUid == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userUid == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userUid == request.auth.uid;
    }

    // 알림 컬렉션 규칙 (필요시 추가)
    match /notifications/{notificationId} {
      // 읽기: 알림 대상자 본인만 가능
      allow read: if isAuthenticated() && resource.data.targetUser == request.auth.uid;
      
      // 생성: 인증된 사용자가 다른 사용자에게 알림 생성 가능 (댓글, 멘션 등)
      allow create: if isAuthenticated()
        && request.resource.data.targetUser is string
        && request.resource.data.type is string
        && request.resource.data.fromUser == request.auth.uid
        && request.resource.data.message is string
        && request.resource.data.isRead == false
        && request.resource.data.createdAt != null;
      
      // 수정: 알림 대상자가 읽음 상태만 변경 가능
      allow update: if isAuthenticated() 
        && resource.data.targetUser == request.auth.uid
        && isSafeFieldUpdate(['isRead', 'readAt']);
      
      // 삭제: 알림 대상자 본인만 가능
      allow delete: if isAuthenticated() && resource.data.targetUser == request.auth.uid;
    }

    // 공지사항 컬렉션 규칙
    match /announcements/{announcementId} {
      // 읽기는 모든 인증된 사용자에게 허용
      allow read: if isAuthenticated();
      
      // 생성, 수정, 삭제는 관리자만 가능
      allow create: if isAdmin() 
        && request.resource.data.title is string
        && request.resource.data.content is string
        && request.resource.data.important is bool;
      
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // 업데이트 내역 컬렉션 규칙
    match /updates/{updateId} {
      // 읽기는 모든 인증된 사용자에게 허용
      allow read: if isAuthenticated();
      
      // 생성, 수정, 삭제는 관리자만 가능
      allow create: if isAdmin()
        && request.resource.data.version is string
        && request.resource.data.title is string
        && request.resource.data.changes is list
        && request.resource.data.type is string
        && request.resource.data.releaseDate is timestamp;
      
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // 시스템 설정 관리
    match /systemSettings/{settingId} {
      // 읽기: 모든 인증된 사용자 (점검 모드 상태 확인용)
      allow read: if isAuthenticated();
      // 쓰기: 관리자만 가능 (설정 변경)
      allow write: if isAdmin();
    }

    // 보안 로그 컬렉션 규칙 (관리자만 접근 가능)
    match /securityLogs/{logId} {
      allow read, write: if isAdmin();
    }

    // 차단된 IP 컬렉션 규칙 (관리자만 접근 가능)
    match /blockedIPs/{blockId} {
      allow read, write: if isAdmin();
    }

    // 키워드 필터 컬렉션 규칙 (관리자만 접근 가능)
    match /keywordFilters/{filterId} {
      allow read, write: if isAdmin();
    }

    // 신고 컬렉션 규칙 - 새로 추가
    match /reports/{reportId} {
      // 읽기: 관리자만 가능
      allow read: if isAdmin();
      
      // 생성: 인증된 사용자만 가능 (신고 제출)
      allow create: if isAuthenticated()
        && request.resource.data.reportedBy == request.auth.uid
        && request.resource.data.contentType is string
        && request.resource.data.contentId is string
        && request.resource.data.reason is string
        && request.resource.data.status == 'pending'
        && request.resource.data.createdAt is timestamp;
      
      // 수정: 관리자만 가능 (신고 처리)
      allow update: if isAdmin()
        && isSafeFieldUpdate(['status', 'adminNote', 'processedAt', 'processedBy', 'autoProcessed']);
      
      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // 차단된 사용자 컬렉션 규칙 - 새로 추가
    match /blockedUsers/{userId} {
      // 읽기: 본인 또는 관리자만 가능
      allow read: if isOwner(userId) || isAdmin();
      
      // 생성: 관리자만 가능
      allow create: if isAdmin()
        && request.resource.data.blockedUid is string
        && request.resource.data.reason is string
        && request.resource.data.blockedAt is timestamp
        && request.resource.data.blockedBy == request.auth.uid;
      
      // 수정: 관리자만 가능 (차단 해제 등)
      allow update: if isAdmin();
      
      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // 사용자 활동 로그 컬렉션 규칙 - 새로 추가
    match /userLogs/{logId} {
      // 읽기: 관리자만 가능
      allow read: if isAdmin();
      
      // 생성: 시스템에서 자동 생성 (인증된 사용자의 활동)
      allow create: if isAuthenticated()
        && request.resource.data.userUid == request.auth.uid
        && request.resource.data.action is string
        && request.resource.data.timestamp is timestamp
        && request.resource.data.ipAddress is string;
      
      // 수정/삭제: 불가 (로그는 불변)
      allow update, delete: if false;
    }

    // 구독 컬렉션 규칙
    match /subscriptions/{subscriptionId} {
      // 읽기: 구독자 본인 또는 관리자만 가능
      allow read: if isAuthenticated() && (
        resource.data.subscriber == request.auth.uid ||
        resource.data.target == request.auth.uid ||
        isAdmin()
      );
      
      // 생성: 인증된 사용자가 자신의 구독만 생성 가능
      allow create: if isAuthenticated() 
        && request.resource.data.subscriber == request.auth.uid
        && request.resource.data.target is string
        && request.resource.data.type is string;
      
      // 삭제: 구독자 본인만 가능 (구독 취소)
      allow delete: if isAuthenticated() && resource.data.subscriber == request.auth.uid;
    }

    // 푸시 구독 정보 컬렉션 규칙
    match /pushSubscriptions/{userId} {
      // 읽기: 본인 또는 관리자만 가능
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      
      // 생성/수정: 본인만 가능
      allow create, update: if isAuthenticated() 
        && request.auth.uid == userId
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.subscription is map
        && request.resource.data.subscription.endpoint is string;
      
      // 삭제: 본인 또는 관리자만 가능
      allow delete: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }

    // 검색 통계 컬렉션 규칙 - 새로 추가
    match /searchStats/{statId} {
      // 읽기: 관리자만 가능 (통계 분석용)
      allow read: if isAdmin();
      
      // 생성: 시스템에서 자동 생성 (검색 통계 수집)
      allow create: if isAuthenticated()
        && request.resource.data.searchTerm is string
        && request.resource.data.searchCount is number
        && request.resource.data.resultCount is number
        && request.resource.data.timestamp is timestamp
        && request.resource.data.userUid == request.auth.uid;
      
      // 수정: 검색 횟수 증가만 허용
      allow update: if isAuthenticated()
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['searchCount', 'lastSearched'])
        && request.resource.data.searchCount >= resource.data.searchCount;
      
      // 삭제: 관리자만 가능
      allow delete: if isAdmin();
    }

    // 사용자 검색 히스토리 컬렉션 규칙 - 새로 추가
    match /userSearchHistory/{userId} {
      // 읽기: 본인만 가능
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // 생성/수정: 본인만 가능
      allow create, update: if isAuthenticated() 
        && request.auth.uid == userId
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.searchHistory is list
        && request.resource.data.searchHistory.size() <= 100; // 최대 100개 히스토리
      
      // 삭제: 본인만 가능
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
